plugins {
	id 'idea'
	id 'java'
	id 'org.springframework.boot'
	id 'io.spring.dependency-management'
	id 'io.freefair.lombok'
	id 'com.google.protobuf'
	id 'com.google.cloud.tools.jib'
}

version = '0.0.1-SNAPSHOT'
group = 'dev.appkr'
sourceCompatibility = '11'

dependencies {
	implementation platform('org.springframework.cloud:spring-cloud-dependencies:2020.0.5')

	implementation 'org.springframework.boot:spring-boot-starter'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.cloud:spring-cloud-starter-sleuth'
	implementation 'io.zipkin.brave:brave-instrumentation-grpc'

	// grpc
	testImplementation "io.grpc:grpc-testing:${grpcVersion}"

	// grpc-spring framework
	implementation "net.devh:grpc-client-spring-boot-starter:${grpcSpringVersion}"

	// proto stub
	implementation project(':proto')
}

tasks.named('test') {
	useJUnitPlatform()
}

jib {
	from {
		image = 'amazoncorretto:11-alpine-jdk'
	}
	to {
		image = "${rootProject.name}-${project.name}"
		tags = ['latest']
	}
	// If set to packaged, puts the JAR artifact built by the Gradle Java plugin into the final image.
	// If set to exploded (default), containerizes individual .class files and resources files.
	containerizingMode = 'packaged'
	container {
		jvmFlags = [
				// Java9 container support @see https://www.eclipse.org/openj9/docs/xxusecontainersupport/
				'-XX:+UseContainerSupport',
				'-XX:+HeapDumpOnOutOfMemoryError',
				'-XX:HeapDumpPath=/tmp',
				// for G1GC @see https://www.oracle.com/technical-resources/articles/java/g1gc.html
				'-XX:+UseG1GC',
				'-Djava.net.preferIPv4Stack=true',
				'-Duser.timezone=Asia/Seoul',
				'-Dfile.encoding=UTF8',
				'-Dsun.net.inetaddr.ttl=30'
		]
		ports = ['8080']
		creationTime = 'USE_CURRENT_TIMESTAMP'
	}
}
